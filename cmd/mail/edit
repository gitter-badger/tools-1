#!/bin/bash

PREFIX='mail'
source "config"
source "${LIB}/log"
source "${LIB}/installed"
source "${CMD}/mail/tmp/mysql"
source "${CMD}/mail/lib/validate"
source "${CMD}/mail/lib/functions"

cd ${CMD}/mail

RequireInstall

function GetUserAndDomain {
	USER=$(echo "${EMAIL}" | awk -F\@ '{print $1}')
	DOMAIN=$(echo "${EMAIL}" | awk -F\@ '{print $2}')
}

UPDATE=""
function AppendToUpdate {
	if [ -z "${UPDATE}" ]; then
		UPDATE="$1"
	else
		UPDATE="${UPDATE}, $1"
	fi
}

EMAIL="$1"

GetUserAndDomain

if [ -z "${EMAIL}" ]; then
	while true; do
		Log "Email: " true
		read EMAIL

		GetUserAndDomain

		if [ -z "$DOMAIN" ]; then
			LogBrown "Email format is invalid. Missing @"
		else
			break
		fi
	done
fi

EMAIL_DATA=$(Query "SELECT emails.id, emails.name, emails.user, domains.domain, emails.active FROM ${MAIL_MYSQL_DATABASE}.emails LEFT JOIN ${MAIL_MYSQL_DATABASE}.domains ON emails.domain_id = domains.id WHERE emails.user = '${USER}' AND domains.domain = '${DOMAIN}'")

if [ -z "${EMAIL_DATA}" ]; then
	LogRed "Email not found!"
	exit
fi

ID=$(echo "${EMAIL_DATA}" | awk '{print $1}')
NAME=$(echo "${EMAIL_DATA}" | awk '{print $2}')
USER=$(echo "${EMAIL_DATA}" | awk '{print $3}')
ACTIVE=$(echo "${EMAIL_DATA}" | awk '{print $5}')

if [ "${ACTIVE}" = "1" ]; then
	ACTIVE='Yes'
else
	ACTIVE='No'
fi

Log "Current values:"
Log "Name:      ${NAME}"
Log "Email:     ${EMAIL}"
Log "Password:  **********"
Log "Active:    ${ACTIVE}"

Log ""
Log "To keep the same values keep them empty"
Log "Email should be without @domain.tld"
Log ""

Log "Name: " true
read NAME_NEW
if [ ! -z "${NAME_NEW}" ]; then
	AppendToUpdate "name = '${NAME_NEW}'"
fi

Log "Email: " true
read EMAIL_NEW
if [ -z "${EMAIL_NEW}" ]; then
	EMAIL_NEW="${EMAIL}"
else
	if echo "${EMAIL_NEW}" | grep -q '@'; then
		LogRed "Email should be without the @domain.tld"
		exit
	else
		AppendToUpdate "user = '${EMAIL_NEW}'"
	fi
fi

Log "Password: " true
read -s PASS_NEW && echo ""
if [ ! -z "${PASS_NEW}" ]; then
	AppendToUpdate "password = ENCRYPT('${PASS_NEW}', CONCAT('\$6\$', SUBSTRING(SHA(RAND()), -16)))"
fi

Log "Active [empty/y/n]: " true
read ACTIVE_NEW
if [ ! -z "${ACTIVE_NEW}" ]; then
	if [ $(echo $ACTIVE_NEW | awk '{print tolower($0)}') = "y" ]; then
		AppendToUpdate "active = 1"
	else
		AppendToUpdate "active = 0"
	fi
fi

if [ ! -z "${UPDATE}" ]; then
	UPDATE="UPDATE ${MAIL_MYSQL_DATABASE}.emails SET ${UPDATE} WHERE id = ${ID}"
	Query "${UPDATE}"
else
	LogBrown "Nothing changed"
fi